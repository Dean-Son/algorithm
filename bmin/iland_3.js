/*
직사각형 격자 형태의 지도에 몇 개의 섬들이 있습니다. 아래는 6(세로) x 10(가로) 크 기의 지도를 보여주는 예시입니다.
1101110000
1100001000
1000011000
0000000000
0000100100
1110101111
• 0은 바다(물)를 나타내고, 1로 이어진 덩어리는 섬을 나타냅니다.
• 1끼리 상, 하 또는 좌, 우 로 붙어있는 경우에만 이어졌다고 정의합니 다.
• 대각으로만 맞닿은 경우는 이어졌다고 보지 않습니다.
• 위의 예시에서는 넓이가 2 인 섬이 1개, 넓이가 3 인 섬이 3개, 넓이가 5 인 섬이 2개 있습니다.
• 어떤 섬에 포함된 1의 개수를 섬의 넓이라고 정의합니다.
• 위의 지도에서 나타난 섬의 넓이들을 중복되는 것을 제외하고, 작은 것부 터 나열하면 2, 3, 5 입니다.

지도를 나타내는 문자열 배열 maps 가 매개변수로 주어집니다. 지도에 나타난 섬의 넓이들을 중복되는 것을 제외하고 작은 것부터 차례대로 배열에 담아서 return 하도록 solution 함수를 완성해주세요.

*/

function solution(maps) {
  const rows = maps.length;
  const cols = maps[0].length;
  const visited = Array.from({ length: rows }, () => Array(cols).fill(false));

  const areas = new Set(); // 섬 넓이를 중복 없이 저장

  // DFS 함수: 연결된 섬의 넓이를 계산
  function dfs(row, col) {
    if (row < 0 || row >= rows || col < 0 || col >= cols) return 0; // 범위 벗어남
    if (visited[row][col] || maps[row][col] === "0") return 0; // 이미 방문했거나 바다인 경우

    visited[row][col] = true; // 현재 셀을 방문 표시
    let area = 1; // 현재 셀 포함하여 넓이 1로 시작

    // 상, 하, 좌, 우 방향으로 DFS 탐색
    area += dfs(row - 1, col); // 상
    area += dfs(row + 1, col); // 하
    area += dfs(row, col - 1); // 좌
    area += dfs(row, col + 1); // 우

    return area;
  }

  // 전체 격자를 탐색하여 각 섬의 넓이를 구함
  for (let i = 0; i < rows; i++) {
    for (let j = 0; j < cols; j++) {
      if (maps[i][j] === "1" && !visited[i][j]) {
        const area = dfs(i, j);
        areas.add(area); // 중복되지 않도록 Set에 추가
      }
    }
  }

  // 넓이를 오름차순으로 정렬하여 반환, 섬이 없으면 [-1] 반환
  const result = Array.from(areas).sort((a, b) => a - b);
  return result.length > 0 ? result : [-1];
}

// 예시 입력
const maps = [
  "1101110000",
  "1100001000",
  "1000011000",
  "0000000000",
  "0000100100",
  "1110101111",
].map((row) => row.split("")); // 각 문자열을 배열로 변환

console.log(solution(maps)); // [2, 3, 5]

/*
코드 설명
DFS 함수 dfs(row, col):
현재 위치가 유효한지 확인하고, '1'이 아닌 경우나 이미 방문한 경우 넓이를 0으로 반환합니다.
현재 위치를 포함하여 넓이 1을 시작점으로 설정하고, 상하좌우 방향으로 DFS를 수행하여 연결된 '1'의 개수를 누적합니다.
전체 지도 탐색:
maps 배열을 순회하면서 '1'이면서 아직 방문하지 않은 위치에서 dfs를 호출해 새로운 섬의 넓이를 구하고, areas 집합에 추가합니다.
결과 반환:
areas에 저장된 넓이 값을 배열로 변환하여 오름차순 정렬하고, 결과를 반환합니다.
섬이 없는 경우 [-1]을 반환합니다.
테스트 케이스
예시 입력:
maps = ["1101110000", "1100001000", "1000011000", "0000000000", "0000100100", "1110101111"]
출력: [2, 3, 5]
모든 바다만 있는 경우:
maps = ["000", "000", "000"]
출력: [-1]
하나의 큰 섬만 있는 경우:
maps = ["111", "111", "111"]
출력: [9]
이 코드로 주어진 지도에서 섬의 넓이를 계산하고 원하는 형식으로 결과를 반환할 수 있습니다.
*/
